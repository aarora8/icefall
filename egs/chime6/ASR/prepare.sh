#!/usr/bin/env bash
export PYTHONPATH=/exp/aarora/icefall_work_env/icefall:$PYTHONPATH
set -eou pipefail

nj=15
stage=-1
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/LibriSpeech
#      You can find BOOKS.TXT, test-clean, train-clean-360, etc, inside it.
#      You can download them from https://www.openslr.org/12
#
#  - $dl_dir/lm
#      This directory contains the following files downloaded from
#       http://www.openslr.org/resources/11
#
#        - 3-gram.pruned.1e-7.arpa.gz
#        - 3-gram.pruned.1e-7.arpa
#        - 4-gram.arpa.gz
#        - 4-gram.arpa
#        - librispeech-vocab.txt
#        - librispeech-lexicon.txt
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech
dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  5000
  2000
  1000
  500
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

#if [ $stage -le -1 ] && [ $stop_stage -ge -1 ]; then
#  log "Stage -1: Download LM"
#  [ ! -e $dl_dir/lm ] && mkdir -p $dl_dir/lm
#  ./local/download_lm.py --out-dir=$dl_dir/lm
#fi

#if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
#  log "Stage 0: Download data"
#
#  # If you have pre-downloaded it to /path/to/LibriSpeech,
#  # you can create a symlink
#  #
#  #   ln -sfv /path/to/LibriSpeech $dl_dir/LibriSpeech
#  #
#  if [ ! -d $dl_dir/LibriSpeech/train-other-500 ]; then
#    lhotse download librispeech --full $dl_dir
#  fi
#
#  # If you have pre-downloaded it to /path/to/musan,
#  # you can create a symlink
#  #
#  #   ln -sfv /path/to/musan $dl_dir/
#  #
#  if [ ! -d $dl_dir/musan ]; then
#    lhotse download musan $dl_dir
#  fi
#fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare LibriSpeech manifest"
  mkdir -p data/manifests
  local/queue.pl --mem 30G --config local/coe.conf data/prepare.log ~/miniconda3/envs/k2/bin/python3 local/prepare.py
fi
exit
if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare musan manifest"
  # We assume that you have downloaded the musan corpus
  # to data/musan
  mkdir -p data/manifests
  lhotse prepare musan $dl_dir/musan data/manifests
fi

#if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
#  log "Stage 3: Compute fbank for librispeech"
#  mkdir -p data/fbank
#  ./local/compute_fbank_librispeech.py
#fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Compute fbank for musan"
  mkdir -p data/fbank
  ./local/compute_fbank_musan.py
fi

#if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
#  log "Stage 5: Prepare phone based lang"
#  lang_dir=data/lang_phone
#  mkdir -p $lang_dir
#  cat /exp/aarora/kaldi_work_env/kaldi_me/egs/chime6/s5b_track1/data/local/dict/lexicon.txt |
#    sort | uniq > $lang_dir/lexicon.txt
#
#  if [ ! -f $lang_dir/L_disambig.pt ]; then
#    ./local/prepare_lang.py --lang-dir $lang_dir
#  fi
#fi

#if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
#  log "Stage 5: Prepare phone based lang"
#  mkdir -p data/lang_phone data/lm
#  wget -P data/lm/ https://www.openslr.org/resources/11/librispeech-lexicon.txt
#  cat data/lm/librispeech-lexicon.txt \
#  <( echo "mm m"
#      echo "<unk> spn"
#      echo "cuz k aa z"
#      echo "cuz k ah z"
#      echo "cuz k ao z"
#      echo "[laughs] laughs"
#      echo "[noise] noise"
#      echo "[inaudible] inaudible"
#      echo "[spn] spn"
#      echo "[sil] sil"
#      echo "mmm m"; \
#      echo "hmm hh m"; \
#    ) | sort | uniq > data/lang_phone/lexicon.txt
#
#  if [ ! -f data/lang_phone/L_disambig.pt ]; then
#    ./local/prepare_lang.py
#  fi
#fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: Prepare phone based lang"
  mkdir -p data/lang_phone data/lm
  wget -P data/lm/ https://www.openslr.org/resources/11/librispeech-lexicon.txt
  (echo '!SIL SIL'; echo '<SPOKEN_NOISE> SPN'; echo '<UNK> SPN'; ) |
    cat - data/lm/librispeech-lexicon.txt |
    sort | uniq > data/lang_phone/lexicon.txt

  if [ ! -f data/lang_phone/L_disambig.pt ]; then
    ./local/prepare_lang.py
  fi
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "State 6: Prepare BPE based lang"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p $lang_dir
    # We reuse words.txt from phone based lexicon
    # so that the two can share G.pt later.
    cp data/lang_phone/words.txt $lang_dir
    local/prepare_lm_text.py
    local/train_lm.sh
    if [ ! -f $lang_dir/train.txt ]; then
      log "Generate data for BPE training"
      cat data/lm/lm_train_text > $lang_dir/transcript_words.txt
    fi

    ./local/train_bpe_model.py \
      --lang-dir $lang_dir \
      --vocab-size $vocab_size \
      --transcript $lang_dir/transcript_words.txt

    if [ ! -f $lang_dir/L_disambig.pt ]; then
      ./local/prepare_lang_bpe.py --lang-dir $lang_dir
    fi
  done
fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: Prepare bigram P"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}

    if [ ! -f $lang_dir/transcript_tokens.txt ]; then
      ./local/convert_transcript_words_to_tokens.py \
        --lexicon $lang_dir/lexicon.txt \
        --transcript $lang_dir/transcript_words.txt \
        --oov "<UNK>" \
        > $lang_dir/transcript_tokens.txt
    fi

    if [ ! -f $lang_dir/P.arpa ]; then
      ./shared/make_kn_lm.py \
        -ngram-order 2 \
        -text $lang_dir/transcript_tokens.txt \
        -lm $lang_dir/P.arpa
    fi

    if [ ! -f $lang_dir/P.fst.txt ]; then
      python3 -m kaldilm \
        --read-symbol-table="$lang_dir/tokens.txt" \
        --disambig-symbol='#0' \
        --max-order=2 \
        $lang_dir/P.arpa > $lang_dir/P.fst.txt
    fi
  done
fi

if [ $stage -le 8 ] && [ $stop_stage -ge 8 ]; then
  log "Stage 8: Prepare G"
  # We assume you have install kaldilm, if not, please install
  # it using: pip install kaldilm
  gunzip -c data/lm/lm.gz >data/lm/lm.arpa
  python3 -m kaldilm \
    --read-symbol-table="data/lang_phone/words.txt" \
    --disambig-symbol='#0' \
    --max-order=3 \
    data/lm/lm.arpa > data/lm/G_3_gram.fst.txt
fi

if [ $stage -le 9 ] && [ $stop_stage -ge 9 ]; then
  log "Stage 9: Compile HLG"
  ./local/compile_hlg.py --lang-dir data/lang_phone

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    ./local/compile_hlg.py --lang-dir $lang_dir
  done
fi
